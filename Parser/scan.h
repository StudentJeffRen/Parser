/****************************************************/
/* File: scan.h                                     */
/* The scanner interface for the N compiler         */
/* Compiler Construction: Principles and Practice   */
/* Programming by Zhiyao Liang                      */
/* MUST FIT 2019 Fall                               */
/****************************************************/

#ifndef _SCAN_H_
#define _SCAN_H_

/* Maximum number of characters in the source file */
#define MAX_FILE_LEN 10000

/* MAXRESERVED = the number of reserved words/ keywords */
#define MAX_RESERVED 6

/* MAXTOKENLEN is the maximum size of a token */
#define MAX_TOKEN_LEN 100



/* tokenString array stores the lexeme of each token */
//extern char tokenString[MAX_TOKEN_LEN+1];

/* the line number of the current token */
//extern int lineNum; /* source line number for listing */

typedef enum 
   {
	NONE,  ERROR,/* book-keeping tokens, they are used to label non-final states in the DFA graph.*/
    /* reserved words 
     if else num return void while 
    */
    IF,ELSE,NUM,RETURN,VOID,WHILE,
    /* multicharacter tokens */
    ID, NUMBER, STRING, COMMENT,  /* comment token may can be discarded by scanner */
    /* special symbols for 
       + - * / % < <= > >= == != = ; , ( ) [ ] { } 
    */
    PLUS,MINUS,STAR,OVER,MOD,LT,LTE, GT, GTE, EQ, NEQ, ASSIGN, SEMI, COMMA, LPAR,RPAR, LBR, RBR, LCUR, RCUR,
	/* book-keeping token, representing the EOS (end of stream) signal received at the end of the streamer */
	ARROW, /* for --> */  
   SMILE, /* for :) */
   ENTER, /* end of line, when a new line is met */
   EOP /* end of program */
   } TokenType;




typedef struct{
  const char * string;   
  // It is ok to assign  the return of copy_string(), which is char *, to string, 
  TokenType type;
} Token;

// A node in a double linked list
typedef struct TkNd{
  Token* token;
  //int lineNum;
  struct TkNd * prev;
  struct TkNd * next;
}TokenNode;


typedef struct {
	TokenNode * head;
	TokenNode * tail;
}TokenList;


TokenList  scan(const char* fileName);

//void print_token_list_to_file(FILE* fp, TokenList tl);

//Bool is_string_num(const char * str);
// no need to check. Assume can only read tokens from a file that is generated by a correct scanner. 

//Bool is_string_id(const char * str); 

#endif
